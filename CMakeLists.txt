cmake_minimum_required( VERSION 3.2 ) 

if( NOT ROOT_DIRECTORY )
    set( ROOT_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} )
    if ( NOT fetched_subprojects )
        if ( NOT PYTHON_EXECUTABLE )
            find_package( PythonInterp )
            if ( NOT PYTHONINTERP_FOUND )
                message( FATAL_ERROR "Python interpeter installation was not found." )
            endif()
        endif()
        execute_process( COMMAND ${PYTHON_EXECUTABLE} "./metaconfigure/fetch_subprojects.py"
                         WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} 
                         RESULT_VARIABLE fetch_failure )
        if ( NOT fetch_failure )
            set( fetched_subprojects TRUE CACHE BOOL "fetch script ran" )
        else()
            message( FATAL_ERROR "Failed to fetch dependencies" )
        endif()
    endif()
endif()

if( NOT DEFINED build_type )
    if( VERBOSE )
        message( STATUS "build_type variable not specified")
        message( STATUS "build_type defaulted to debug")
    endif()
    set ( build_type "debug" )
endif()
if( NOT DEFINED interpolation_build_type )
    if( VERBOSE )
        message( STATUS "interpolation_build_type not specified")
        message( STATUS "interpolation_build_type defaulted to value of build_type variable")
    endif()
    set( interpolation_build_type "${build_type}" )
 endif()

if( NOT DEFINED static_libraries )
    if( VERBOSE )
        message( STATUS "static_libraries variable not specified")
        message( STATUS "static_libraries defaulted to FALSE")
    endif()
    set( build_static_libraries FALSE )
else()
    set( build_static_libraries ${static_libraries} )
endif()

project( interpolation VERSION 0.0.1 LANGUAGES CXX )

get_directory_property( is_subproject PARENT_DIRECTORY )
if( NOT TARGET range-v3-adapter )
    add_subdirectory( ${ROOT_DIRECTORY}/subprojects/range-v3-adapter )
endif()
if( NOT TARGET hana-adapter )
    add_subdirectory( ${ROOT_DIRECTORY}/subprojects/hana-adapter )
endif()
if( NOT TARGET catch-adapter )
    add_subdirectory( ${ROOT_DIRECTORY}/subprojects/catch-adapter )
endif()
if( NOT TARGET dimwits )
    add_subdirectory( ${ROOT_DIRECTORY}/subprojects/dimwits )
endif()
if( NOT TARGET variant-adapter )
    add_subdirectory( ${ROOT_DIRECTORY}/subprojects/variant-adapter )
endif()
if( NOT TARGET fmt-adapter )
    add_subdirectory( ${ROOT_DIRECTORY}/subprojects/fmt-adapter )
endif()
if( NOT TARGET spdlog-adapter )
    add_subdirectory( ${ROOT_DIRECTORY}/subprojects/spdlog-adapter )
endif()
if( NOT TARGET Log )
    add_subdirectory( ${ROOT_DIRECTORY}/subprojects/Log )
endif()
if( NOT TARGET header-utilities )
    add_subdirectory( ${ROOT_DIRECTORY}/subprojects/header-utilities )
endif()

if( NOT is_subproject )
    if( DEFINED CXX_compiler_flags )
        if( ( NOT DEFINED interpolation_compiler_flags ) AND ( NOT DEFINED interpolation_use_default_compiler_flags ) )
            set( interpolation_compiler_flags "${CXX_compiler_flags}" )
        endif()
    endif()
    if( NOT DEFINED interpolation_compiler_flags )
        if( CMAKE_CXX_COMPILER_ID STREQUAL "GNU" )
            if( interpolation_build_type STREQUAL "debug" )
                set( interpolation_compiler_flags "-std=c++14 -Wall -Wextra -Wpedantic -Werror -g -gdwarf-3" )
            elseif( interpolation_build_type STREQUAL "coverage" )
                set( interpolation_compiler_flags "-std=c++14 -Wall -Wextra -Wpedantic -Werror -g -gdwarf-3 -fprofile-arcs -ftest-coverage -fno-inline" )
            elseif( interpolation_build_type STREQUAL "release" )
                set( interpolation_compiler_flags "-std=c++14 -Wall -Wextra -Wpedantic -Werror -O3 -DNDEBUG" )
                if( NOT no_link_time_optimization )
                    set( interpolation_compiler_flags "${interpolation_compiler_flags} -flto" )
                endif()
            elseif( interpolation_build_type STREQUAL "native" )
                set( interpolation_compiler_flags "-std=c++14 -Wall -Wextra -Wpedantic -Werror -O3 -DNDEBUG -march=native" )
                if( NOT no_link_time_optimization )
                    set( interpolation_compiler_flags "${interpolation_compiler_flags} -flto" )
                endif()
            endif()
        elseif( CMAKE_CXX_COMPILER_ID STREQUAL "Clang" )
            if( interpolation_build_type STREQUAL "debug" )
                set( interpolation_compiler_flags "-std=c++14 -Wall -Wextra -Wpedantic -Werror -g -gdwarf-3" )
            elseif( interpolation_build_type STREQUAL "coverage" )
                set( interpolation_compiler_flags "-std=c++14 -Wall -Wextra -Wpedantic -Werror -g -gdwarf-3 -fprofile-arcs -ftest-coverage -fno-inline" )
            elseif( interpolation_build_type STREQUAL "release" )
                set( interpolation_compiler_flags "-std=c++14 -Wall -Wextra -Wpedantic -Werror -O3 -DNDEBUG" )
                if( NOT no_link_time_optimization )
                    set( interpolation_compiler_flags "${interpolation_compiler_flags} -flto" )
                endif()
            elseif( interpolation_build_type STREQUAL "native" )
                set( interpolation_compiler_flags "-std=c++14 -Wall -Wextra -Wpedantic -Werror -O3 -DNDEBUG -march=native" )
                if( NOT no_link_time_optimization )
                    set( interpolation_compiler_flags "${interpolation_compiler_flags} -flto" )
                endif()
            endif()
        elseif( CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang" )
            if( interpolation_build_type STREQUAL "debug" )
                set( interpolation_compiler_flags "-std=c++14 -Wall -Wextra -Wpedantic -Werror -g -gdwarf-3" )
            elseif( interpolation_build_type STREQUAL "coverage" )
                set( interpolation_compiler_flags "-std=c++14 -Wall -Wextra -Wpedantic -Werror -g -gdwarf-3 -fprofile-arcs -ftest-coverage -fno-inline" )
            elseif( interpolation_build_type STREQUAL "release" )
                set( interpolation_compiler_flags "-std=c++14 -Wall -Wextra -Wpedantic -Werror -O3 -DNDEBUG" )
                if( NOT no_link_time_optimization )
                    set( interpolation_compiler_flags "${interpolation_compiler_flags} -flto" )
                endif()
            elseif( interpolation_build_type STREQUAL "native" )
                set( interpolation_compiler_flags "-std=c++14 -Wall -Wextra -Wpedantic -Werror -O3 -DNDEBUG -march=native" )
                if( NOT no_link_time_optimization )
                    set( interpolation_compiler_flags "${interpolation_compiler_flags} -flto" )
                endif()
            endif()
        else()
            message( WARNING "Compiler vendor not recognized. No compilation flags set" )
        endif()
    endif()
    if( DEFINED appended_flags AND NOT interpolation_no_appended_flags )
        set( interpolation_compiler_flags "${interpolation_compiler_flags} ${appended_flags}" )
    endif()
    if( DEFINED interpolation_appended_flags )
        set( interpolation_compiler_flags "${interpolation_compiler_flags} ${interpolation_appended_flags}" )
    endif()
endif()

if ( NOT GIT_EXECUTABLE )
    find_package( Git )
    if ( NOT GIT_FOUND )
        message( FATAL_ERROR "git installation was not found." )
    endif()
endif()
execute_process(
    COMMAND ${GIT_EXECUTABLE} rev-parse --abbrev-ref HEAD
    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
    OUTPUT_VARIABLE GIT_BRANCH
    OUTPUT_STRIP_TRAILING_WHITESPACE
)
execute_process(
    COMMAND ${GIT_EXECUTABLE} rev-parse HEAD
    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
    OUTPUT_VARIABLE GIT_HASH
    OUTPUT_STRIP_TRAILING_WHITESPACE
)

message( STATUS "" )
message( STATUS "-----------------------------------------------------------" )
message( STATUS "" )
message( STATUS "interpolation Version: 0.0.1" )
message( STATUS "Git current branch: ${GIT_BRANCH}" )
message( STATUS "Git commit hash: ${GIT_HASH}" )
message( STATUS "" )
if( NOT is_subproject ) 
    message( STATUS "interpolation flags: ${interpolation_compiler_flags}" ) 
    message( STATUS "" ) 
endif() 
message( STATUS "-----------------------------------------------------------" ) 
message( STATUS "" ) 

add_library( interpolation INTERFACE )
target_include_directories( interpolation INTERFACE src )
target_link_libraries( interpolation INTERFACE dimwits INTERFACE Log INTERFACE header-utilities INTERFACE range-v3-adapter INTERFACE variant-adapter ) 

if( NOT is_subproject ) 
    enable_testing() 
    add_subdirectory( src/interpolation/Interpolant/Histogram/test ) 
    add_subdirectory( src/interpolation/Interpolant/LinearLinear/test ) 
    add_subdirectory( src/interpolation/Interpolant/LinearLogarithmic/test ) 
    add_subdirectory( src/interpolation/Interpolant/LogarithmicLinear/test ) 
    add_subdirectory( src/interpolation/Interpolant/LogarithmicLogarithmic/test ) 
    add_subdirectory( src/interpolation/table/Table/test ) 
    add_subdirectory( src/interpolation/table/Type/test ) 
    add_subdirectory( src/interpolation/table/Variant/Iterator/helper/test ) 
    add_subdirectory( src/interpolation/table/Variant/Iterator/test ) 
    add_subdirectory( src/interpolation/table/Variant/test ) 
    add_subdirectory( src/interpolation/table/Vector/test ) 
    add_subdirectory( src/interpolation/table/domain/max/IsCompiletimeConstant/test ) 
    add_subdirectory( src/interpolation/table/domain/max/IsRuntimeConstant/test ) 
    add_subdirectory( src/interpolation/table/domain/min/IsCompiletimeConstant/test ) 
    add_subdirectory( src/interpolation/table/domain/min/IsRuntimeConstant/test ) 
    add_subdirectory( src/interpolation/table/left/interval/IsCompiletimeConstant/test ) 
    add_subdirectory( src/interpolation/table/left/interval/IsRuntimeConstant/test ) 
    add_subdirectory( src/interpolation/table/left/interval/Throws/test ) 
    add_subdirectory( src/interpolation/table/make/test ) 
    add_subdirectory( src/interpolation/table/right/interval/IsCompiletimeConstant/test ) 
    add_subdirectory( src/interpolation/table/right/interval/IsRuntimeConstant/test ) 
    add_subdirectory( src/interpolation/table/right/interval/Throws/test ) 
    add_subdirectory( src/interpolation/table/search/test ) 
    add_subdirectory( src/interpolation/table/transform/test ) 
    add_subdirectory( src/interpolation/test ) 
endif() 
